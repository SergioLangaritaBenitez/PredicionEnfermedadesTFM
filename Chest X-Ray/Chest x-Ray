{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5314,"status":"ok","timestamp":1667907495741,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"},"user_tz":-60},"id":"yy4tuYxm-YR9","outputId":"fb261713-497d-489c-ba2a-cb046da0214a"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:From <ipython-input-1-ce4688ad892e>:6: is_gpu_available (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use `tf.config.list_physical_devices('GPU')` instead.\n"]},{"output_type":"stream","name":"stdout","text":["tensorflow version: 2.9.2\n","keras version: 2.9.0\n","Num GPUs Available:  1\n"]}],"source":["import tensorflow as tf\n","print('tensorflow version:', tf.__version__)\n","from tensorflow import keras\n","print('keras version:', keras.__version__)\n","tf.test.gpu_device_name()\n","tf.test.is_gpu_available()\n","print(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"_s6nw_6D-wou","executionInfo":{"status":"ok","timestamp":1667907497428,"user_tz":-60,"elapsed":1689,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"}}},"outputs":[],"source":["import os\n","import math\n","import numpy as np\n","import pandas as pd\n","import random\n","import cv2  # pip3 install opencv-python\n","from scipy import ndimage\n","import zipfile\n","import tensorflow_datasets as tfds\n","import os.path\n","import matplotlib.pyplot as plt\n","from matplotlib import cm\n","import random"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"pIwc8FLN-z1p","executionInfo":{"status":"ok","timestamp":1667907497428,"user_tz":-60,"elapsed":3,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"}}},"outputs":[],"source":[]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":26360,"status":"ok","timestamp":1667907523786,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"},"user_tz":-60},"id":"zON7EhBL-2O3","outputId":"d58f9942-8901-4599-89c9-d36780bde119"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"lTo_cRKWaC3Z","executionInfo":{"status":"ok","timestamp":1667907523786,"user_tz":-60,"elapsed":14,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"}}},"outputs":[],"source":["f='/content/drive/MyDrive/BIGDataUPV/TFM/Chest X-Ray (Pneumonia,Covid-19,Tuberculosis)/'\n","batch_size = 32\n","img_height = 128\n","img_width = 128"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"A0mHLWYbRAEx","executionInfo":{"status":"ok","timestamp":1667907523787,"user_tz":-60,"elapsed":13,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"}},"outputId":"c03e2525-60b0-41e3-8618-8b0e621d5f8c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'x_train=np.load(f+\\'traindata.npy\\')\\ntrain_label=np.load(f+\"traindata_label.npy\")'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":5}],"source":["\"\"\"x_train=np.load(f+'traindata.npy')\n","train_label=np.load(f+\"traindata_label.npy\")\"\"\""]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":89},"id":"JPL_kN0CRijs","executionInfo":{"status":"ok","timestamp":1667907523788,"user_tz":-60,"elapsed":13,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"}},"outputId":"6619d3ff-6c9b-40dd-b5d0-51a71b93c9c4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'class_names = [\\'COVID19\\',\\'NORMAL\\',\\'PNEUMONIA\\',\\'TUBERCULOSIS\\']\\n\\nBATCH_SIZE = 1\\nplt.figure()\\nprint (train_ds.take(1))\\nfor images, labels in train_ds.take(1):\\n    plt.imshow(images[0].numpy().astype(\"uint8\"))\\n    break\\n\\nfor images, labels in train_ds.take(1):\\n    for i in range(1):\\n        ax = plt.subplot(3, 3, i + 1)\\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\\n        plt.title(class_names[labels[i]])\\n        plt.axis(\"off\")'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":6}],"source":["\"\"\"class_names = ['COVID19','NORMAL','PNEUMONIA','TUBERCULOSIS']\n","\n","BATCH_SIZE = 1\n","plt.figure()\n","print (train_ds.take(1))\n","for images, labels in train_ds.take(1):\n","    plt.imshow(images[0].numpy().astype(\"uint8\"))\n","    break\n","\n","for images, labels in train_ds.take(1):\n","    for i in range(1):\n","        ax = plt.subplot(3, 3, i + 1)\n","        plt.imshow(images[i].numpy().astype(\"uint8\"))\n","        plt.title(class_names[labels[i]])\n","        plt.axis(\"off\")\"\"\""]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":89},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1667907523789,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"},"user_tz":-60},"id":"nt9pb0WL2sKQ","outputId":"a3d3dbac-ea63-4945-b1ce-ba82b11e7fdd"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"from PIL import Image\\n\\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 6.5))\\n\\nnormal=np.where(train_label==1)\\nnum=0\\n\\nfor a in normal[0]:\\n  b1 = x_train[a]\\n  b1f=cv2.flip(b1,1)\\n  axes[0].imshow(b1, cmap=cm.Greys_r)\\n  axes[1].imshow(b1f, cmap=cm.Greys_r)\\n  rescaled = (255.0 / b1f.max() * (b1f - b1f.min())).astype(np.uint8)\\n  im = Image.fromarray(rescaled)\\n  im.save(f+'aux/normalflip'+str(num)+'.jpeg')\\n  num=num+1\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":7}],"source":["\"\"\"from PIL import Image\n","\n","fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 6.5))\n","\n","normal=np.where(train_label==1)\n","num=0\n","\n","for a in normal[0]:\n","  b1 = x_train[a]\n","  b1f=cv2.flip(b1,1)\n","  axes[0].imshow(b1, cmap=cm.Greys_r)\n","  axes[1].imshow(b1f, cmap=cm.Greys_r)\n","  rescaled = (255.0 / b1f.max() * (b1f - b1f.min())).astype(np.uint8)\n","  im = Image.fromarray(rescaled)\n","  im.save(f+'aux/normalflip'+str(num)+'.jpeg')\n","  num=num+1\"\"\""]},{"cell_type":"code","execution_count":8,"metadata":{"id":"n94_cvGEhXg_","executionInfo":{"status":"ok","timestamp":1667907523789,"user_tz":-60,"elapsed":11,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"}}},"outputs":[],"source":["\n","def imagetofile(folder,file,val_sp,subset):\n","  batch_size2 = 7800\n","  if(os.path.isfile(file+'.npy')):\n","    print(\"OK\")\n","    x_train=np.load(file+'.npy')\n","    train_label=np.load(file+\"_label.npy\")\n","    return x_train,train_label\n","  else:\n","    train_ds= tf.keras.utils.image_dataset_from_directory(\n","      folder,\n","      validation_split=val_sp,\n","      subset=subset, seed=123,\n","      shuffle=False,\n","      image_size=(img_height, img_width),\n","      batch_size=batch_size2)\n","    x_train =None\n","    train_label=None\n","    for image, label in tfds.as_numpy(train_ds):\n","      x_train = image\n","      train_label=label\n","    x_train = x_train.astype('float32') / 255.0\n","    np.save(file, x_train)\n","    np.save(file+\"_label\", train_label)\n","    return x_train,train_label\n"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":89},"id":"DU2TtaGIYaP-","outputId":"8df2aaed-cb27-4666-c48e-eefb8bdb3e34","executionInfo":{"status":"ok","timestamp":1667907537672,"user_tz":-60,"elapsed":13894,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["OK\n"]},{"output_type":"execute_result","data":{"text/plain":["'train_ds= tf.keras.utils.image_dataset_from_directory(\\n  folder,\\n  validation_split=0.01,\\n  subset=\"training\", seed=123,\\n  shuffle=False,\\n  image_size=(img_height, img_width),\\n  batch_size=batch_size)\\n\\n\\nx_train =None\\ntrain_label=None\\nfor image, label in tfds.as_numpy(train_ds):\\n  x_train = image\\n  train_label=label\\n\\n\\nx_train = x_train.astype(\\'float32\\') / 255.0'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":9}],"source":["folder=f+'train'\n","x_train,train_label=imagetofile(folder,f+'traindata',0.001,\"training\")\n","\"\"\"train_ds= tf.keras.utils.image_dataset_from_directory(\n","  folder,\n","  validation_split=0.01,\n","  subset=\"training\", seed=123,\n","  shuffle=False,\n","  image_size=(img_height, img_width),\n","  batch_size=batch_size)\n","\n","\n","x_train =None\n","train_label=None\n","for image, label in tfds.as_numpy(train_ds):\n","  x_train = image\n","  train_label=label\n","\n","\n","x_train = x_train.astype('float32') / 255.0\"\"\"\n"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":89},"executionInfo":{"elapsed":4862,"status":"ok","timestamp":1667907542530,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"},"user_tz":-60},"id":"erb0V_nnYTrz","outputId":"a81b359e-695c-4a0d-889d-96e2a3ca3cf1"},"outputs":[{"output_type":"stream","name":"stdout","text":["OK\n"]},{"output_type":"execute_result","data":{"text/plain":["'test_ds = tf.keras.utils.image_dataset_from_directory(\\n  folder2,\\n  validation_split=0.99,\\n  subset=\"validation\", seed=123,\\n  shuffle=False,\\n  image_size=(img_height, img_width),\\n  batch_size=batch_size)\\n\\nx_test =None\\ntest_label=None\\nfor image, label in tfds.as_numpy(test_ds):\\n  x_test = image\\n  test_label=label\\n\\n\\nx_test = x_test.astype(\\'float32\\') / 255.0'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":10}],"source":["folder2=f+'test'\n","x_test,test_label=imagetofile(folder2,f+'testdata',0.999,\"validation\")\n","\n","\n","\"\"\"test_ds = tf.keras.utils.image_dataset_from_directory(\n","  folder2,\n","  validation_split=0.99,\n","  subset=\"validation\", seed=123,\n","  shuffle=False,\n","  image_size=(img_height, img_width),\n","  batch_size=batch_size)\n","\n","x_test =None\n","test_label=None\n","for image, label in tfds.as_numpy(test_ds):\n","  x_test = image\n","  test_label=label\n","\n","\n","x_test = x_test.astype('float32') / 255.0\"\"\""]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":89},"executionInfo":{"elapsed":1850,"status":"ok","timestamp":1667907544377,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"},"user_tz":-60},"id":"7jui5bCegOMS","outputId":"3504fed2-7fa0-4891-a838-0792cbfbd843"},"outputs":[{"output_type":"stream","name":"stdout","text":["OK\n"]},{"output_type":"execute_result","data":{"text/plain":["'folder3=f+\\'val\\'\\nval_ds = tf.keras.utils.image_dataset_from_directory(\\n  folder3,\\n  validation_split=0.2,\\n  subset=\"validation\", seed=123,\\n  shuffle=False,\\n  image_size=(img_height, img_width),\\n  batch_size=batch_size)\\n\\nx_val =None\\nval_label=None\\nfor image, label in tfds.as_numpy(val_ds):\\n  x_val = image\\n  val_label=label\\n\\n\\nx_val = x_val.astype(\\'float32\\') / 255.0'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":11}],"source":["folder2=f+'val'\n","x_val,val_label=imagetofile(folder2,f+'valdata',0.999,\"validation\")\n","\n","\"\"\"folder3=f+'val'\n","val_ds = tf.keras.utils.image_dataset_from_directory(\n","  folder3,\n","  validation_split=0.2,\n","  subset=\"validation\", seed=123,\n","  shuffle=False,\n","  image_size=(img_height, img_width),\n","  batch_size=batch_size)\n","\n","x_val =None\n","val_label=None\n","for image, label in tfds.as_numpy(val_ds):\n","  x_val = image\n","  val_label=label\n","\n","\n","x_val = x_val.astype('float32') / 255.0\"\"\""]},{"cell_type":"code","execution_count":12,"metadata":{"id":"vqGtavKdQqdh","executionInfo":{"status":"ok","timestamp":1667907544378,"user_tz":-60,"elapsed":11,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"}}},"outputs":[],"source":["def conv_block_1(x, filters, ks = (3, 3)):\n","  x = keras.layers.Conv2D(filters=filters,\n","                          kernel_size=ks,\n","                          strides=(1, 1),\n","                          padding='same',\n","                          activation=None)(x)\n","  x = keras.layers.BatchNormalization()(x)\n","  x = keras.layers.Activation('relu')(x)\n","  return x\n","\n","def cnn_1(input_shape = None, num_labels = None):\n","    if input_shape is None:\n","        raise Exception('input_shape must be provided as a tuple, e.g., (28, 28)')\n","    if num_labels is None:\n","        raise Exception('num_labels must be provided as an integer')\n","    inputs = keras.Input(shape = input_shape)\n","    x = inputs\n","    #x = conv_block_1(x, filters=16, ks=(5, 5))\n","    x = conv_block_1(x, filters=16, ks=(3, 3))\n","    #x = conv_block_1(x, filters=32, ks=(3, 3))\n","    x = conv_block_1(x, filters=64, ks=(3, 3))\n","    x = keras.layers.MaxPool2D(pool_size=(2, 2), padding='same')(x)\n","    x = conv_block_1(x, filters=128, ks=(3, 3))\n","    x = conv_block_1(x, filters=256, ks=(3, 3))\n","    x = keras.layers.MaxPool2D(pool_size=(2, 2), padding='same')(x)\n","    x = conv_block_1(x, filters=256, ks=(3, 3))\n","    x = conv_block_1(x, filters=256, ks=(3, 3))\n","    x = keras.layers.MaxPool2D(pool_size=(2, 2), padding='same')(x)\n","    x = conv_block_1(x, filters=512, ks=(3, 3))\n","    x = conv_block_1(x, filters=512, ks=(3, 3))\n","    x = keras.layers.MaxPool2D(pool_size=(2, 2), padding='same')(x)\n","    x = conv_block_1(x, filters=1024, ks=(3, 3))\n","    x = conv_block_1(x, filters=1024, ks=(3, 3))\n","\n","    x = keras.layers.Flatten()(x)\n","\n","    x = keras.layers.Dense(516)(x)\n","    x = keras.layers.BatchNormalization()(x)\n","    x = keras.layers.Activation('relu')(x)\n","\n","    outputs = keras.layers.Dense(num_labels, activation='softmax')(x)\n","    model = keras.Model(inputs, outputs)\n","    model.compile(\n","        optimizer=keras.optimizers.Adam(learning_rate=1.0e-5),\n","        loss='sparse_categorical_crossentropy',\n","        metrics=[tf.keras.metrics.SparseCategoricalCrossentropy(),tf.keras.metrics.SparseCategoricalAccuracy()],\n","    )\n","    model.summary()\n","    return model"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1667907544378,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"},"user_tz":-60},"id":"LqKXxKhy-4dj","outputId":"151390df-403e-4a7e-c82a-80aab1bb15f0"},"outputs":[{"output_type":"stream","name":"stdout","text":["['COVID19', 'NORMAL', 'PNEUMONIA', 'TUBERCULOSIS']\n","4\n"]}],"source":["class_names = ['COVID19','NORMAL','PNEUMONIA','TUBERCULOSIS']\n","print(class_names)\n","print(len(class_names))\n"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":71},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1667907544379,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"},"user_tz":-60},"id":"BfF-8ZlI-6Ae","outputId":"cb893828-25d7-46f2-ecfa-fab4d67d7f30"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'import matplotlib.pyplot as plt\\n\\nBATCH_SIZE = 9\\nplt.figure(figsize=(10, 10))\\nfor images, labels in train_ds.take(1):\\n    for i in range(BATCH_SIZE):\\n        ax = plt.subplot(3, 3, i + 1)\\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\\n        plt.title(class_names[labels[i]])\\n        plt.axis(\"off\")'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":14}],"source":["\"\"\"import matplotlib.pyplot as plt\n","\n","BATCH_SIZE = 9\n","plt.figure(figsize=(10, 10))\n","for images, labels in train_ds.take(1):\n","    for i in range(BATCH_SIZE):\n","        ax = plt.subplot(3, 3, i + 1)\n","        plt.imshow(images[i].numpy().astype(\"uint8\"))\n","        plt.title(class_names[labels[i]])\n","        plt.axis(\"off\")\"\"\"\n","\n"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":560,"status":"ok","timestamp":1667907544931,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"},"user_tz":-60},"id":"jqTD3S9zh9ps","outputId":"8e172fc1-d12d-43a2-e43f-f17d3a50ae4c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_1 (InputLayer)        [(None, 128, 128, 3)]     0         \n","                                                                 \n"," conv2d (Conv2D)             (None, 128, 128, 16)      448       \n","                                                                 \n"," batch_normalization (BatchN  (None, 128, 128, 16)     64        \n"," ormalization)                                                   \n","                                                                 \n"," activation (Activation)     (None, 128, 128, 16)      0         \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 128, 128, 64)      9280      \n","                                                                 \n"," batch_normalization_1 (Batc  (None, 128, 128, 64)     256       \n"," hNormalization)                                                 \n","                                                                 \n"," activation_1 (Activation)   (None, 128, 128, 64)      0         \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 64, 64, 64)       0         \n"," )                                                               \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 64, 64, 128)       73856     \n","                                                                 \n"," batch_normalization_2 (Batc  (None, 64, 64, 128)      512       \n"," hNormalization)                                                 \n","                                                                 \n"," activation_2 (Activation)   (None, 64, 64, 128)       0         \n","                                                                 \n"," conv2d_3 (Conv2D)           (None, 64, 64, 256)       295168    \n","                                                                 \n"," batch_normalization_3 (Batc  (None, 64, 64, 256)      1024      \n"," hNormalization)                                                 \n","                                                                 \n"," activation_3 (Activation)   (None, 64, 64, 256)       0         \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 32, 32, 256)      0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_4 (Conv2D)           (None, 32, 32, 256)       590080    \n","                                                                 \n"," batch_normalization_4 (Batc  (None, 32, 32, 256)      1024      \n"," hNormalization)                                                 \n","                                                                 \n"," activation_4 (Activation)   (None, 32, 32, 256)       0         \n","                                                                 \n"," conv2d_5 (Conv2D)           (None, 32, 32, 256)       590080    \n","                                                                 \n"," batch_normalization_5 (Batc  (None, 32, 32, 256)      1024      \n"," hNormalization)                                                 \n","                                                                 \n"," activation_5 (Activation)   (None, 32, 32, 256)       0         \n","                                                                 \n"," max_pooling2d_2 (MaxPooling  (None, 16, 16, 256)      0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_6 (Conv2D)           (None, 16, 16, 512)       1180160   \n","                                                                 \n"," batch_normalization_6 (Batc  (None, 16, 16, 512)      2048      \n"," hNormalization)                                                 \n","                                                                 \n"," activation_6 (Activation)   (None, 16, 16, 512)       0         \n","                                                                 \n"," conv2d_7 (Conv2D)           (None, 16, 16, 512)       2359808   \n","                                                                 \n"," batch_normalization_7 (Batc  (None, 16, 16, 512)      2048      \n"," hNormalization)                                                 \n","                                                                 \n"," activation_7 (Activation)   (None, 16, 16, 512)       0         \n","                                                                 \n"," max_pooling2d_3 (MaxPooling  (None, 8, 8, 512)        0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_8 (Conv2D)           (None, 8, 8, 1024)        4719616   \n","                                                                 \n"," batch_normalization_8 (Batc  (None, 8, 8, 1024)       4096      \n"," hNormalization)                                                 \n","                                                                 \n"," activation_8 (Activation)   (None, 8, 8, 1024)        0         \n","                                                                 \n"," conv2d_9 (Conv2D)           (None, 8, 8, 1024)        9438208   \n","                                                                 \n"," batch_normalization_9 (Batc  (None, 8, 8, 1024)       4096      \n"," hNormalization)                                                 \n","                                                                 \n"," activation_9 (Activation)   (None, 8, 8, 1024)        0         \n","                                                                 \n"," flatten (Flatten)           (None, 65536)             0         \n","                                                                 \n"," dense (Dense)               (None, 516)               33817092  \n","                                                                 \n"," batch_normalization_10 (Bat  (None, 516)              2064      \n"," chNormalization)                                                \n","                                                                 \n"," activation_10 (Activation)  (None, 516)               0         \n","                                                                 \n"," dense_1 (Dense)             (None, 4)                 2068      \n","                                                                 \n","=================================================================\n","Total params: 53,094,120\n","Trainable params: 53,084,992\n","Non-trainable params: 9,128\n","_________________________________________________________________\n"]}],"source":["input_shape = (x_train.shape[1], x_train.shape[2], 3)\n","cnn = cnn_1(input_shape = input_shape, num_labels=len(class_names))"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vga2g2PXKXVz","outputId":"a717f6f1-c891-40e8-99ca-43e620dda4d6","executionInfo":{"status":"ok","timestamp":1667908116769,"user_tz":-60,"elapsed":571840,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/25\n","42/42 [==============================] - 46s 699ms/step - loss: 0.3612 - sparse_categorical_crossentropy: 0.3612 - sparse_categorical_accuracy: 0.8794 - val_loss: 1.9781 - val_sparse_categorical_crossentropy: 1.9781 - val_sparse_categorical_accuracy: 0.2432\n","Epoch 2/25\n","42/42 [==============================] - 20s 485ms/step - loss: 0.0437 - sparse_categorical_crossentropy: 0.0437 - sparse_categorical_accuracy: 0.9936 - val_loss: 2.7804 - val_sparse_categorical_crossentropy: 2.7804 - val_sparse_categorical_accuracy: 0.2432\n","Epoch 3/25\n","42/42 [==============================] - 21s 506ms/step - loss: 0.0202 - sparse_categorical_crossentropy: 0.0202 - sparse_categorical_accuracy: 0.9983 - val_loss: 3.5239 - val_sparse_categorical_crossentropy: 3.5239 - val_sparse_categorical_accuracy: 0.2432\n","Epoch 4/25\n","42/42 [==============================] - 22s 528ms/step - loss: 0.0132 - sparse_categorical_crossentropy: 0.0132 - sparse_categorical_accuracy: 1.0000 - val_loss: 4.1370 - val_sparse_categorical_crossentropy: 4.1370 - val_sparse_categorical_accuracy: 0.2973\n","Epoch 5/25\n","42/42 [==============================] - 22s 529ms/step - loss: 0.0092 - sparse_categorical_crossentropy: 0.0092 - sparse_categorical_accuracy: 1.0000 - val_loss: 4.7302 - val_sparse_categorical_crossentropy: 4.7302 - val_sparse_categorical_accuracy: 0.1892\n","Epoch 6/25\n","42/42 [==============================] - 22s 513ms/step - loss: 0.0075 - sparse_categorical_crossentropy: 0.0075 - sparse_categorical_accuracy: 0.9998 - val_loss: 5.1558 - val_sparse_categorical_crossentropy: 5.1558 - val_sparse_categorical_accuracy: 0.3243\n","Epoch 7/25\n","42/42 [==============================] - 22s 518ms/step - loss: 0.0060 - sparse_categorical_crossentropy: 0.0060 - sparse_categorical_accuracy: 1.0000 - val_loss: 5.3304 - val_sparse_categorical_crossentropy: 5.3304 - val_sparse_categorical_accuracy: 0.2973\n","Epoch 8/25\n","42/42 [==============================] - 22s 527ms/step - loss: 0.0055 - sparse_categorical_crossentropy: 0.0055 - sparse_categorical_accuracy: 1.0000 - val_loss: 5.2187 - val_sparse_categorical_crossentropy: 5.2187 - val_sparse_categorical_accuracy: 0.2973\n","Epoch 9/25\n","42/42 [==============================] - 22s 526ms/step - loss: 0.0047 - sparse_categorical_crossentropy: 0.0047 - sparse_categorical_accuracy: 1.0000 - val_loss: 4.7800 - val_sparse_categorical_crossentropy: 4.7800 - val_sparse_categorical_accuracy: 0.3514\n","Epoch 10/25\n","42/42 [==============================] - 22s 524ms/step - loss: 0.0041 - sparse_categorical_crossentropy: 0.0041 - sparse_categorical_accuracy: 1.0000 - val_loss: 3.9237 - val_sparse_categorical_crossentropy: 3.9237 - val_sparse_categorical_accuracy: 0.4865\n","Epoch 11/25\n","42/42 [==============================] - 22s 521ms/step - loss: 0.0036 - sparse_categorical_crossentropy: 0.0036 - sparse_categorical_accuracy: 1.0000 - val_loss: 2.8289 - val_sparse_categorical_crossentropy: 2.8289 - val_sparse_categorical_accuracy: 0.6216\n","Epoch 12/25\n","42/42 [==============================] - 22s 522ms/step - loss: 0.0032 - sparse_categorical_crossentropy: 0.0032 - sparse_categorical_accuracy: 1.0000 - val_loss: 1.9759 - val_sparse_categorical_crossentropy: 1.9759 - val_sparse_categorical_accuracy: 0.6216\n","Epoch 13/25\n","42/42 [==============================] - 22s 524ms/step - loss: 0.0032 - sparse_categorical_crossentropy: 0.0032 - sparse_categorical_accuracy: 1.0000 - val_loss: 1.1423 - val_sparse_categorical_crossentropy: 1.1423 - val_sparse_categorical_accuracy: 0.7027\n","Epoch 14/25\n","42/42 [==============================] - 22s 523ms/step - loss: 0.0030 - sparse_categorical_crossentropy: 0.0030 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.7355 - val_sparse_categorical_crossentropy: 0.7355 - val_sparse_categorical_accuracy: 0.7297\n","Epoch 15/25\n","42/42 [==============================] - 22s 525ms/step - loss: 0.0027 - sparse_categorical_crossentropy: 0.0027 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.5227 - val_sparse_categorical_crossentropy: 0.5227 - val_sparse_categorical_accuracy: 0.8108\n","Epoch 16/25\n","42/42 [==============================] - 22s 526ms/step - loss: 0.0025 - sparse_categorical_crossentropy: 0.0025 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.3951 - val_sparse_categorical_crossentropy: 0.3951 - val_sparse_categorical_accuracy: 0.8108\n","Epoch 17/25\n","42/42 [==============================] - 22s 523ms/step - loss: 0.0023 - sparse_categorical_crossentropy: 0.0023 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.3793 - val_sparse_categorical_crossentropy: 0.3793 - val_sparse_categorical_accuracy: 0.8378\n","Epoch 18/25\n","42/42 [==============================] - 22s 521ms/step - loss: 0.0023 - sparse_categorical_crossentropy: 0.0023 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.3679 - val_sparse_categorical_crossentropy: 0.3679 - val_sparse_categorical_accuracy: 0.8378\n","Epoch 19/25\n","42/42 [==============================] - 22s 520ms/step - loss: 0.0024 - sparse_categorical_crossentropy: 0.0024 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.3770 - val_sparse_categorical_crossentropy: 0.3770 - val_sparse_categorical_accuracy: 0.8378\n","Epoch 20/25\n","42/42 [==============================] - 22s 523ms/step - loss: 0.0021 - sparse_categorical_crossentropy: 0.0021 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.3536 - val_sparse_categorical_crossentropy: 0.3536 - val_sparse_categorical_accuracy: 0.8649\n","Epoch 21/25\n","42/42 [==============================] - 22s 526ms/step - loss: 0.0017 - sparse_categorical_crossentropy: 0.0017 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.3592 - val_sparse_categorical_crossentropy: 0.3592 - val_sparse_categorical_accuracy: 0.8649\n","Epoch 22/25\n","42/42 [==============================] - 22s 524ms/step - loss: 0.0015 - sparse_categorical_crossentropy: 0.0015 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.3798 - val_sparse_categorical_crossentropy: 0.3798 - val_sparse_categorical_accuracy: 0.8649\n","Epoch 23/25\n","42/42 [==============================] - 22s 521ms/step - loss: 0.0017 - sparse_categorical_crossentropy: 0.0017 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.3713 - val_sparse_categorical_crossentropy: 0.3713 - val_sparse_categorical_accuracy: 0.8649\n","Epoch 24/25\n","42/42 [==============================] - 22s 522ms/step - loss: 0.0015 - sparse_categorical_crossentropy: 0.0015 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.3672 - val_sparse_categorical_crossentropy: 0.3672 - val_sparse_categorical_accuracy: 0.8649\n","Epoch 25/25\n","42/42 [==============================] - 22s 523ms/step - loss: 0.0014 - sparse_categorical_crossentropy: 0.0014 - sparse_categorical_accuracy: 1.0000 - val_loss: 0.3733 - val_sparse_categorical_crossentropy: 0.3733 - val_sparse_categorical_accuracy: 0.8649\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f0411081d50>"]},"metadata":{},"execution_count":16}],"source":["cnn.fit(x_train.reshape(x_train.shape), train_label,validation_data=(x_val,val_label) ,epochs=25, batch_size=100, shuffle=True)"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"u2_3iRRFiDOd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1667908121294,"user_tz":-60,"elapsed":4133,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"}},"outputId":"194e98ba-4a39-414b-db3f-5c1bd5807b55"},"outputs":[{"output_type":"stream","name":"stdout","text":["8/8 [==============================] - 4s 540ms/step - loss: 0.3744 - sparse_categorical_crossentropy: 0.3744 - sparse_categorical_accuracy: 0.9052\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.37443047761917114, 0.37443047761917114, 0.9051948189735413]"]},"metadata":{},"execution_count":17}],"source":["cnn.evaluate(x_test, test_label, batch_size=100)"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"xS81Xy6GD0OP","executionInfo":{"status":"ok","timestamp":1667908121295,"user_tz":-60,"elapsed":5,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"}}},"outputs":[],"source":["from matplotlib import pyplot\n","from sklearn.base import BaseEstimator\n","from sklearn import metrics\n","class MyArgmaxForPredictedLabels(BaseEstimator):\n","    def __init__(self, threshold = 0.5):\n","        self.threshold = threshold\n","        self._estimator_type = 'classifier'\n","\n","    def fit(self, X, y):\n","        raise Exception('No fit implemented in this class')\n","        return self\n","\n","    def predict(self, y_probs):\n","        assert type(y_probs) == np.ndarray\n","        assert len(y_probs.shape) == 1\n","        return y_probs\n","\n","def show_results(y_true, y_pred, labels):\n","    _cm_ = metrics.confusion_matrix(y_true, y_pred)\n","    max_digits = int(math.log(_cm_.max())) + 1\n","    format_str = '%%%dd' % max_digits\n","    for i in range(_cm_.shape[0]):\n","        for j in range(_cm_.shape[1]):\n","            print(format_str % _cm_[i, j], end = ' ')\n","        print()\n","    print()\n","\n","    print(metrics.classification_report(y_true, y_pred))\n","    #\n","    fig, axes = pyplot.subplots(nrows = 1, ncols = 2, figsize = (16, 7))\n","    #fig.suptitle(title)\n","    #\n","    metrics.ConfusionMatrixDisplay.from_estimator(estimator = MyArgmaxForPredictedLabels(),\n","                          X = y_pred, y = y_true,\n","                          normalize = 'true', ax = axes[0],\n","                          labels = labels,\n","                          cmap = 'Blues') #, colorbar = False)\n","    #\n","    metrics.ConfusionMatrixDisplay.from_estimator(estimator = MyArgmaxForPredictedLabels(),\n","                          X = y_pred, y = y_true,\n","                          normalize = 'pred', ax = axes[1],\n","                          labels = labels,\n","                          cmap = 'Oranges') #, colorbar = False)\n","    #\n","    pyplot.tight_layout()\n","    pyplot.show()\n","    del fig"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"HvMJ75mL-_nu","colab":{"base_uri":"https://localhost:8080/","height":823},"executionInfo":{"status":"ok","timestamp":1667908123496,"user_tz":-60,"elapsed":2205,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"}},"outputId":"bed5687f-e110-46df-e790-b98cc213d98c"},"outputs":[{"output_type":"stream","name":"stdout","text":["8/8 [==============================] - 1s 165ms/step\n","   104      0      0      1 \n","     9    175     48      2 \n","     1     12    377      0 \n","     0      0      0     41 \n","\n","              precision    recall  f1-score   support\n","\n","           0       0.91      0.99      0.95       105\n","           1       0.94      0.75      0.83       234\n","           2       0.89      0.97      0.93       390\n","           3       0.93      1.00      0.96        41\n","\n","    accuracy                           0.91       770\n","   macro avg       0.92      0.93      0.92       770\n","weighted avg       0.91      0.91      0.90       770\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1152x504 with 4 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["y_test_pred=cnn.predict(x_test, batch_size=100)\n","y_test_pred = y_test_pred.argmax(axis=1)\n","\n","#print(test_label)\n","#print(y_test_pred)\n","#print(class_names)\n","\n","show_results(y_true = test_label, y_pred = y_test_pred, labels = [0,1,2,3])"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"T9mBW77yO3cP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1667908132916,"user_tz":-60,"elapsed":9424,"user":{"displayName":"Sergio Langarita","userId":"00334444535396266362"}},"outputId":"6ece28dc-c003-43e9-cc35-53c37f946419"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:Found untraced functions such as _jit_compiled_convolution_op, _jit_compiled_convolution_op, _jit_compiled_convolution_op, _jit_compiled_convolution_op, _jit_compiled_convolution_op while saving (showing 5 of 10). These functions will not be directly callable after loading.\n"]}],"source":["cnn.save(f+\"cnnmodel\")"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":[],"provenance":[],"authorship_tag":"ABX9TyPeTw6rFz8fKe8Vcc6e5ZMO"},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}